import sys
import sqlite3 as sl
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QHBoxLayout, QGroupBox, QDialog, QVBoxLayout, QInputDialog, QLineEdit
from PyQt5.QtGui import QIcon
from PyQt5.QtCore import pyqtSlot

con = sl.connect('lifeApp.db')

with con:
    currDate0 = con.execute("select date('now', 'localtime')")
    for value in currDate0:
        currDate = value[0]

    currTime0 = con.execute("select time('now', 'localtime')")
    for value in currTime0:
        currTime = value[0]

    con.execute(f"insert into life_app_main(date, time) values('{currDate}', '{currTime}');")

    currId0 = con.execute("select last_insert_rowid()")
    for value in currId0:
        currId = value[0]
        # print(currId)

    countAllGoals0 = con.execute(f"select count(*) from life_app_main where date='{currDate}' and all_goal='y';")
    for value in countAllGoals0:
        countAllGoals = value[0]

    countWorkoutYoga0 = con.execute(f"select count(*) from life_app_main where date='{currDate}' and workout_yoga='y';")
    for value in countWorkoutYoga0:
        countWorkoutYoga = value[0]

    countRwd0 = con.execute(f"select count(*) from life_app_main where date='{currDate}' and rwd='y';")
    for value in countRwd0:
        countRwd = value[0]

    countHardware0 = con.execute(f"select count(*) from life_app_main where date='{currDate}' and hardware='y';")
    for value in countHardware0:
        countHardware = value[0]

    countSoftware0 = con.execute(f"select count(*) from life_app_main where date='{currDate}' and software='y';")
    for value in countSoftware0:
        countSoftware = value[0]

    countVeggies0 = con.execute(f"select count(*) from life_app_main where date='{currDate}' and veggies='y';")
    for value in countVeggies0:
        countVeggies = value[0]

    if countVeggies != 0 and countSoftware != 0 and countRwd != 0 and countHardware != 0 and countWorkoutYoga != 0:
        con.execute(f"update life_app_main set all_goal='y' where id={currId};")

    workoutYoga0 = con.execute(f"select workout_yoga from life_app_main where id={currId}")
    for value in workoutYoga0:
        workoutYoga = value[0]

    rwd0 = con.execute(f"select rwd from life_app_main where id={currId}")
    for value in rwd0:
        rwd = value[0]

    hardware0 = con.execute(f"select hardware from life_app_main where id={currId}")
    for value in hardware0:
        hardware = value[0]

    software0 = con.execute(f"select software from life_app_main where id={currId}")
    for value in software0:
        software = value[0]

    veggies0 = con.execute(f"select veggies from life_app_main where id={currId}")
    for value in veggies0:
        veggies = value[0]

    allGoals0 = con.execute(f"select all_goal from life_app_main where id={currId}")
    for value in allGoals0:
        allGoals = value[0]

    class App(QWidget):

        def __init__(self):
            super().__init__()
            self.title = 'Life App'
            self.left = 2000
            self.top = 10
            self.width = 640
            self.height = 480
            self.initUI()

        def initUI(self):
            self.setWindowTitle(self.title)
            self.setGeometry(self.left, self.top, self.width, self.height)

            self.feel()
            self.recAct()
            if countWorkoutYoga == 0:
                self.workoutYoga()
            else:
                con.execute(f"update life_app_main set workout_yoga='y' where id={currId}")
            if countRwd == 0:
                self.rwd()
            else:
                con.execute(f"update life_app_main set rwd='y' where id={currId}")
            if countHardware == 0:
                self.hardware()
            else:
                con.execute(f"update life_app_main set hardware='y' where id={currId}")
            if countSoftware == 0:
                self.software()
            else:
                con.execute(f"update life_app_main set software='y' where id={currId}")
            if countVeggies == 0:
                self.veggies()
            else:
                con.execute(f"update life_app_main set veggies='y' where id={currId}")

            self.nexAct()
            self.show()


        def feel(self):
            text, okPressed = QInputDialog.getText(self, "Get text", "How do you feel: ", QLineEdit.Normal, "")
            if okPressed and text != '':
                mood = text
                con.execute(f"update life_app_main set mood='{mood}' where id={currId}")

        def recAct(self):
            text, okPressed = QInputDialog.getText(self, "Get text", "Most recent activity: ", QLineEdit.Normal, "")
            if okPressed and text != '':
                recAct = text
                con.execute(f"update life_app_main set recent_activity='{recAct}' where id={currId}")

        def workoutYoga(self):
            text, okPressed = QInputDialog.getText(self, "Get text", "Workout/Yoga: ", QLineEdit.Normal, "")
            if okPressed and text != '':
                workoutYoga = text
                con.execute(f"update life_app_main set workout_yoga='{workoutYoga}' where id={currId}")

        def rwd(self):
            text, okPressed = QInputDialog.getText(self, "Get text", "Read/Write/Draw: ", QLineEdit.Normal, "")
            if okPressed and text != '':
                rwd = text
                con.execute(f"update life_app_main set rwd='{rwd}' where id={currId}")

        def hardware(self):
            text, okPressed = QInputDialog.getText(self, "Get text", "Harwdware: ", QLineEdit.Normal, "")
            if okPressed and text != '':
                hardware = text
                con.execute(f"update life_app_main set hardware='{hardware}' where id={currId}")

        def software(self):
            text, okPressed = QInputDialog.getText(self, "Get text", "Software: ", QLineEdit.Normal, "")
            if okPressed and text != '':
                software = text
                con.execute(f"update life_app_main set software='{software}' where id={currId}")
        def veggies(self):
            text, okPressed = QInputDialog.getText(self, "Get text", "veggies: ", QLineEdit.Normal, "")
            if okPressed and text != '':
                veggies = text
                con.execute(f"update life_app_main set veggies='{veggies}' where id={currId}")
        def nexAct(self):
            text, okPressed = QInputDialog.getText(self, "Get text", "Next activity: ", QLineEdit.Normal, "")
            if okPressed and text != '':
                nexAct = text
                con.execute(f"update life_app_main set next_activity='{nexAct}' where id={currId}")

    data = con.execute("select * from life_app_main;")
    for row in data:
        print(row)

    if __name__ == '__main__':
        app = QApplication(sys.argv)
        ex = App()
        sys.exit(app.exec_())

